import numpy as np
import matplotlib.pyplot as plt
from qiskit import BasicAer
from qiskit.aqua import run_algorithm, QuantumInstance
from qiskit.aqua.components.feature_maps import SecondOrderExpansion, FirstOrderExpansion, PauliExpansion, self_product
from qsvm_datasets import *
from qiskit.aqua.algorithms import QSVM
#from custom_map import CustomExpansion
from qiskit import QuantumCircuit, ClassicalRegister, QuantumRegister

#We use ad_hoc data generated by a quantum feature map


def custom_data_map_func(x):
    """A random, probably inefficient custom map"""
    return self_product(x)


def constructor_function(x, qr, inverse=False, depth=2):
    """A mock constructor function to test the class,
    it only places H gates"""
    qc = QuantumCircuit(qr)
    for _ in range(depth):
        qc.h(qr)
        for i in range(len(x)):
            qc.u1(x[i], qr[i])
    return qc


def main():
    feature_dim = 2

    sample_Total, training_input, test_input, class_labels = ad_hoc_data(training_size=5,
                                                                         test_size=5,
                                                                         n=feature_dim,
                                                                         gap=0.3,
                                                                         PLOT_DATA=False)

    shots = 1
    random_seed = 10598

    # We use the simulator
    # backend = BasicAer.get_backend('qasm_simulator')
    backend = BasicAer.get_backend('statevector_simulator')

    quantum_instance = QuantumInstance(backend, shots=shots, seed=random_seed, seed_transpiler=random_seed)

    print(training_input, test_input)



    # The entangler map is a dictionary,
    # keys are source qubit index (int),
    # values are arrays of target qubit index(es) (int)

    entangler_map = {0:[1]} # qubit 0 linked to qubit 1

    # Here we use all available parameters for the simple feature maps
    # (entanglement='full' won't be used because we provide entangler_map)

    #feature_map = CustomExpansion(num_qubits=feature_dim, constructor_function=constructor_function, feature_param=[2])
    feature_map = FirstOrderExpansion(feature_dimension=feature_dim, depth=2)
    feature_map.construct_circuit(x=np.array([0.3, 0.2])).draw(output='mpl', filename='C:/Users/RaphaelLambert/Pictures/test.png')

    #qsvm = QSVM(feature_map, training_input, test_input)
    #result = qsvm.run(quantum_instance)
    #print("testing success ratio: ", result['testing_accuracy'])
    from scipy.ndimage import convolve


if __name__ == '__main__':
    main()
